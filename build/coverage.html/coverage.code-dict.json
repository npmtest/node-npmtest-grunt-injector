{"/home/travis/build/npmtest/node-npmtest-grunt-injector/test.js":"/* istanbul instrument in package npmtest_grunt_injector */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-injector/lib.npmtest_grunt_injector.js":"/* istanbul instrument in package npmtest_grunt_injector */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_injector = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_injector = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-injector/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-injector && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_injector */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_injector\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_injector.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_injector.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_injector.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_injector.__dirname + '/lib.npmtest_grunt_injector.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-injector/node_modules/grunt-injector/Gruntfile.js":"/*\r\n * grunt-injector\r\n * https://github.com/klei-dev/grunt-injector\r\n *\r\n * Copyright (c) 2013 Joakim Bengtson\r\n * Licensed under the MIT license.\r\n */\r\n\r\n'use strict';\r\n\r\nvar path = require('path');\r\n\r\nmodule.exports = function(grunt) {\r\n\r\n  // Project configuration.\r\n  grunt.initConfig({\r\n    jshint: {\r\n      all: [\r\n        'Gruntfile.js',\r\n        'tasks/*.js',\r\n        '<%= nodeunit.tests %>',\r\n      ],\r\n      options: {\r\n        jshintrc: '.jshintrc',\r\n      },\r\n    },\r\n\r\n    // Before generating any new files, remove any previously-created files.\r\n    clean: {\r\n      tests: ['tmp'],\r\n    },\r\n\r\n    // Configuration to be run (and then tested).\r\n    injector: {\r\n      options: {\r\n        template: 'test/fixtures/index.html'\r\n      },\r\n      defaults: {\r\n        files: {\r\n          'tmp/defaults.html': ['test/fixtures/*.js', 'test/fixtures/*.css', 'test/fixtures/component.html', '!test/fixtures/*.min.*']\r\n        }\r\n      },\r\n      prefix: {\r\n        options: {\r\n          prefix: 'abc'\r\n        },\r\n        files: {\r\n          'tmp/prefix.html': ['test/fixtures/*.js', 'test/fixtures/*.css', 'test/fixtures/component.html', '!test/fixtures/*.min.*']\r\n        }\r\n      },\r\n      postfix: {\r\n        options: {\r\n          postfix: '?offset1234567'\r\n        },\r\n        files: {\r\n          'tmp/postfix.html': ['test/fixtures/*.js', 'test/fixtures/*.css', 'test/fixtures/component.html', '!test/fixtures/*.min.*']\r\n        }\r\n      },\r\n      templateString: {\r\n        options: {\r\n          template: null,\r\n          templateString: '{\\n  \"js\": []\\n}',\r\n          starttag: '\"{{ext}}\": [',\r\n          endtag: ']',\r\n          transform: function (file, i, length) {\r\n            return '  \"' + file + '\"' + (i + 1 < length ? ',' : '');\r\n          }\r\n        },\r\n        files: {\r\n          'tmp/templateString.json': ['test/fixtures/*.js', 'test/fixtures/*.css', 'test/fixtures/component.html', '!test/fixtures/*.min.*']\r\n        }\r\n      },\r\n      ignorePath: {\r\n        options: {\r\n          ignorePath: ['test/fixtures']\r\n        },\r\n        files: {\r\n          'tmp/ignorePath.html': ['test/fixtures/*.js', 'test/fixtures/*.css', 'test/fixtures/component.html', '!test/fixtures/*.min.*'],\r\n        }\r\n      },\r\n      noAddRootSlash: {\r\n        options: {\r\n          addRootSlash: false\r\n        },\r\n        files: {\r\n          'tmp/noAddRootSlash.html': ['test/fixtures/*.js', 'test/fixtures/*.css', 'test/fixtures/component.html', '!test/fixtures/*.min.*']\r\n        }\r\n      },\r\n      noAddRootSlashWithIgnorePath: {\r\n        options: {\r\n          addRootSlash: false,\r\n          ignorePath: 'test'\r\n        },\r\n        files: {\r\n          'tmp/noAddRootSlashWithIgnorePath.html': ['test/fixtures/*.js', 'test/fixtures/*.css', 'test/fixtures/component.html', '!test/fixtures/*.min.*']\r\n        }\r\n      },\r\n      relativePaths: {\r\n        options: {\r\n          relative: true\r\n        },\r\n        files: {\r\n          'tmp/relativePaths.html': [\r\n            'test/fixtures/*.js',\r\n            'test/fixtures/*.css',\r\n            'test/fixtures/component.html',\r\n            '!test/fixtures/*.min.*'\r\n          ]\r\n        }\r\n      },\r\n      relativePathsAndExpand: {\r\n        options: {\r\n          relative: true,\r\n          destFile: 'tmp/relativeExpanded.html'\r\n        },\r\n        files: [{\r\n          expand: true,\r\n          cwd: 'test/fixtures',\r\n          src: ['*.js', '*.css', 'component.html', '!*.min.*']\r\n        }]\r\n      },\r\n      expandFiles: {\r\n        options: {\r\n          ignorePath: 'test/fixtures',\r\n          destFile: 'tmp/expanded.html'\r\n        },\r\n        files: [{\r\n          expand: true,\r\n          cwd: 'test/fixtures',\r\n          src: ['*.js', '*.css', 'component.html', '!*.min.*']\r\n        }]\r\n      },\r\n      minFiles: {\r\n        options: {\r\n          ignorePath: 'test/fixtures',\r\n          destFile: 'tmp/min.html',\r\n          min: true\r\n        },\r\n        files: [{\r\n          expand: true,\r\n          cwd: 'test/fixtures',\r\n          src: ['*.js', '*.css', 'component.html', '!*.min.*']\r\n        }]\r\n      },\r\n      bowerFiles: {\r\n        files: {\r\n          'tmp/bower.html': ['test/fixtures/bower.json']\r\n        }\r\n      },\r\n      bowerInOtherDir: {\r\n        files: {\r\n          'tmp/bowerInOtherDir.html': ['test/fixtures/bower_fake/bower.json']\r\n        }\r\n      },\r\n      bowerMin: {\r\n        options: {\r\n          min: true\r\n        },\r\n        files: {\r\n          'tmp/bowerMin.html': ['test/fixtures/bower.json']\r\n        }\r\n      },\r\n      bowerWithIgnore: {\r\n        options: {\r\n          ignorePath: 'test/fixtures/bower_components'\r\n        },\r\n        src: 'test/fixtures/bower.json',\r\n        dest: 'tmp/bowerWithIgnore.html'\r\n      },\r\n      bowerWithPrefix: {\r\n        options: {\r\n          bowerPrefix: 'bower:'\r\n        },\r\n        files: {\r\n          'tmp/bowerWithPrefix.html': ['test/fixtures/bower.json']\r\n        }\r\n      },\r\n      bowerWithOverrides: {\r\n        files: {\r\n          'tmp/bowerWithOverrides.html': ['test/fixtures/bower_overrides/bower.json']\r\n        }\r\n      },\r\n      bowerWithoutCss: {\r\n        files: {\r\n          'tmp/bowerWithoutCss.html': ['test/fixtures/bower_without_css/bower.json']\r\n        }\r\n      },\r\n      custom: {\r\n        options: {\r\n          template: 'test/fixtures/custom.tpl',\r\n          starttag: '/** tagstart */',\r\n          endtag: '/** tagend */',\r\n          transform: function (file) {\r\n            return \"  {ext: '\" + path.extname(file).slice(1) + \"', file: '\" + file + \"'},\";\r\n          },\r\n          ignorePath: 'test/fixtures'\r\n        },\r\n        src: ['test/fixtures/script.js', 'test/fixtures/style.css', 'test/fixtures/component.html'],\r\n        dest: 'tmp/custom.js'\r\n      },\r\n      customSort: {\r\n        options: {\r\n          template: 'test/fixtures/custom.tpl',\r\n          starttag: '/** tagstart */',\r\n          endtag: '/** tagend */',\r\n          transform: function (file) {\r\n            return \"  {ext: '\" + path.extname(file).slice(1) + \"', file: '\" + file + \"'},\";\r\n          },\r\n          sort: function (a, b) {\r\n            return a.localeCompare(b);\r\n          },\r\n          ignorePath: 'test/fixtures'\r\n        },\r\n        src: ['test/fixtures/script.js', 'test/fixtures/style.css', 'test/fixtures/component.html'],\r\n        dest: 'tmp/customSort.js'\r\n      }\r\n    },\r\n\r\n    // Unit tests.\r\n    nodeunit: {\r\n      tests: ['test/*_test.js'],\r\n    },\r\n\r\n  });\r\n\r\n  // Actually load this plugin's task(s).\r\n  grunt.loadTasks('tasks');\r\n\r\n  // These plugins provide necessary tasks.\r\n  grunt.loadNpmTasks('grunt-contrib-jshint');\r\n  grunt.loadNpmTasks('grunt-contrib-clean');\r\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\r\n\r\n  // Whenever the \"test\" task is run, first clean the \"tmp\" dir, then run this\r\n  // plugin's task(s), then test the result.\r\n  grunt.registerTask('test', ['clean', 'injector', 'nodeunit']);\r\n\r\n  // By default, lint and run all tests.\r\n  grunt.registerTask('default', ['jshint', 'test']);\r\n\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-grunt-injector/node_modules/grunt-injector/tasks/injector.js":"/*\r\n * grunt-injector\r\n * https://github.com/klei-dev/grunt-injector\r\n *\r\n * Copyright (c) 2013 Joakim Bengtson\r\n * Licensed under the MIT license.\r\n */\r\n\r\n'use strict';\r\n\r\nvar path = require('path'),\r\n    fs = require('fs'),\r\n    _ = require('lodash'),\r\n    ext = function (file) {\r\n      return path.extname(file).slice(1);\r\n    };\r\n\r\nmodule.exports = function(grunt) {\r\n\r\n  grunt.registerMultiTask('injector', 'Inject references to files into other files (think scripts and stylesheets into an html file)', function() {\r\n    // Merge task-specific and/or target-specific options with these defaults.\r\n    var options = this.options({\r\n      min: false,\r\n      template: null,\r\n      bowerPrefix: null,\r\n      relative: false,\r\n      prefix: '',\r\n      postfix: '',\r\n      addRootSlash: (function (that) {\r\n        var addRootSlash = true;\r\n        if (that.data.options) {\r\n          addRootSlash = that.data.options.addRootSlash || !that.data.options.relative;\r\n        }\r\n        return addRootSlash;\r\n      })(this),\r\n      starttag: '<!-- injector:{{ext}} -->',\r\n      endtag: '<!-- endinjector -->',\r\n      lineEnding: null,\r\n      transform: function (filePath) {\r\n\r\n        var e = ext(filePath);\r\n        var pathToInject = filePath + options.postfix;\r\n        \r\n        if (e === 'css') {\r\n          return '<link rel=\"stylesheet\" href=\"' + pathToInject + '\">';\r\n        } else if (e === 'js') {\r\n          return '<script src=\"' + pathToInject + '\"></script>';\r\n        } else if (e === 'html') {\r\n          return '<link rel=\"import\" href=\"' + pathToInject + '\">';\r\n        }\r\n      }\r\n    });\r\n\r\n    var useDestTpl = false;\r\n    if (!options.template && !options.templateString) {\r\n      grunt.log.writeln('Missing option `template`, using `dest` as template instead'.grey);\r\n      useDestTpl = true;\r\n    }\r\n\r\n    var filesToInject = {};\r\n\r\n    if (!options.lineEnding) {\r\n      var that = this;\r\n      options.lineEnding = getDefaultLineEnding(options, that, grunt);\r\n    }\r\n    \r\n\r\n    // Iterate over all specified file groups and gather files to inject:\r\n\r\n    this.files.forEach(function(f) {\r\n      var template = options.templateString || options.template || options.destFile || f.dest,\r\n          destination = options.destFile || f.dest;\r\n\r\n      if (!options.templateString && !grunt.file.exists(template)) {\r\n        grunt.log.error('Could not find template \"' + template + '\". Injection not possible');\r\n        return false;\r\n      }\r\n\r\n      // Group by destination:\r\n      if (!filesToInject[destination]) {\r\n        filesToInject[destination] = {};\r\n      }\r\n\r\n      // ...and template:\r\n      if (!filesToInject[destination][template]) {\r\n        filesToInject[destination][template] = [];\r\n      }\r\n\r\n      var files = filesToInject[destination][template];\r\n\r\n      f.src.forEach(function(filepath) {\r\n        // Warn on and remove invalid source files.\r\n        if (!grunt.file.exists(filepath)) {\r\n          grunt.log.warn('Source file \"' + filepath + '\" not found.');\r\n          return;\r\n        }\r\n\r\n        // Special handling of bower.json:\r\n        if (path.basename(filepath) === 'bower.json') {\r\n          files.push.apply(files, getFilesFromBower(filepath).map(function (fpath) {\r\n            return {path: fpath, ignore: path.dirname(filepath), key: (options.bowerPrefix || '') + ext(fpath)};\r\n          }));\r\n        } else {\r\n          files.push({path: filepath, key: ext(filepath)});\r\n        }\r\n      });\r\n\r\n      // Clear existing content between injectors\r\n      var templateContent = options.templateString || grunt.file.read(template),\r\n        templateOriginal = templateContent;\r\n\r\n      var re = getInjectorTagsRegExp(options.starttag, options.endtag);\r\n      templateContent = templateContent.replace(re, function (match, indent, starttag, content, endtag) {\r\n        return indent + starttag + options.lineEnding + indent + endtag;\r\n      });\r\n\r\n      if (templateContent !== templateOriginal || !grunt.file.exists(destination)) {\r\n        grunt.file.write(destination, templateContent);\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Inject all gathered files per destination, template and starttag:\r\n     */\r\n    _.forIn(filesToInject, function (templates, destination) {\r\n      _.forIn(templates, function (files, template) {\r\n        // Remove possible duplicates:\r\n        files = _.uniq(files);\r\n\r\n        files.forEach(function (obj) {\r\n          // Get start and end tag for each file:\r\n          obj.starttag = getTag(options.starttag, obj.key);\r\n          obj.endtag = getTag(options.endtag, obj.key);\r\n\r\n          // Fix filename (remove ignorepaths and such):\r\n          var file = obj.path;\r\n          file = makeMinifiedIfNeeded(options.min, file);\r\n          if (options.relative) {\r\n            var base =  path.dirname(destination);\r\n            file = path.relative(base, file);\r\n          }\r\n          file = unixify(file);\r\n          if (options.ignorePath || obj.ignore) {\r\n            file = removeBasePath(toArray(options.ignorePath).concat(toArray(obj.ignore)), file);\r\n          }\r\n          if (options.addRootSlash) {\r\n            file = addRootSlash(file);\r\n          } else {\r\n            file = removeRootSlash(file);\r\n          }\r\n          obj.file = options.prefix + file;\r\n        });\r\n\r\n        // Read template:\r\n        var templateContent = options.templateString || grunt.file.read(template),\r\n            templateOriginal = templateContent;\r\n\r\n        // Inject per start tag:\r\n        _.forIn(_.groupBy(files, 'starttag'), function (sources, starttag) {\r\n          var endtag = sources[0].endtag,\r\n              key = sources[0].key;\r\n\r\n          // Transform to injection content:\r\n          sources.forEach(function (obj, i) {\r\n            obj.transformed = options.transform(obj.file, i, sources.length);\r\n          });\r\n\r\n          sources = removeEmptySources(sources);\r\n\r\n          // Sort files if needed:\r\n          if (typeof options.sort === 'function') {\r\n            sources.sort(function (a, b) {\r\n              return options.sort(a.file, b.file);\r\n            });\r\n          }\r\n\r\n          // Do the injection:\r\n          var re = getInjectorTagsRegExp(starttag, endtag);\r\n          templateContent = templateContent.replace(re, function (match, indent, starttag, content, endtag) {\r\n            grunt.log.writeln('Injecting ' + key.green + ' files ' + ('(' + sources.length + ' files)').grey);\r\n            return indent + starttag + getIndentedTransformations(sources, indent, options.lineEnding) + endtag;\r\n          });\r\n        });\r\n\r\n        // Write the destination file.\r\n        if (templateContent !== templateOriginal || !grunt.file.exists(destination)) {\r\n          grunt.file.write(destination, templateContent);\r\n        } else {\r\n          grunt.log.ok('Nothing changed');\r\n        }\r\n      });\r\n    });\r\n\r\n  });\r\n};\r\n\r\nfunction getInjectorTagsRegExp (starttag, endtag) {\r\n  return new RegExp('([\\t ]*)(' + escapeForRegExp(starttag) + ')(\\\\n|\\\\r|.)*?(' + escapeForRegExp(endtag) + ')', 'gi');\r\n}\r\n\r\nfunction getTag (tag, ext) {\r\n  return tag.replace(new RegExp( escapeForRegExp('{{ext}}'), 'g'), ext);\r\n}\r\n\r\nfunction getFilesFromBower (bowerFile) {\r\n  \r\n  // Load bower dependencies via `wiredep` programmatic access\r\n  var dependencies = require('wiredep')({\r\n        'bowerJson': JSON.parse(fs.readFileSync(bowerFile, 'utf8')),\r\n        'directory': getBowerComponentsDir(bowerFile)\r\n      } \r\n    );\r\n     \r\n  // Pluck out just the JS and CSS Dependencies\r\n  var filteredDependencies = _.pick(dependencies,'css','js');\r\n  \r\n  // Concatenate into a filepaths array   \r\n  return Object.keys(filteredDependencies).reduce(function (files, key) {\r\n       return files.concat(filteredDependencies[key]);\r\n    }, []);\r\n}\r\n\r\nfunction getBowerComponentsDir (bowerFile) {\r\n  var bowerBaseDir = path.dirname(bowerFile),\r\n      bowerRcFile = path.join(bowerBaseDir, '.bowerrc'),\r\n      dir = 'bower_components';\r\n\r\n  if (fs.existsSync(bowerRcFile)) {\r\n    try {\r\n      dir = JSON.parse(fs.readFileSync(bowerRcFile, 'utf8')).directory;\r\n    } catch (e) {\r\n    }\r\n  }\r\n  return path.join(bowerBaseDir, dir);\r\n}\r\n\r\nfunction unixify (path) {\r\n  return path.replace(/\\\\/g, '/');\r\n}\r\n\r\nfunction makeMinifiedIfNeeded (doMinify, filepath) {\r\n  if (!doMinify) {\r\n    return filepath;\r\n  }\r\n  var ext = path.extname(filepath);\r\n  var minFile = filepath.slice(0, -ext.length) + '.min' + ext;\r\n  if (fs.existsSync(minFile)) {\r\n    return minFile;\r\n  }\r\n  return filepath;\r\n}\r\n\r\nfunction toArray (arr) {\r\n  if (!Array.isArray(arr)) {\r\n    return arr ? [arr] : [];\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction addRootSlash (filepath) {\r\n  return filepath.replace(/^\\/*([^\\/])/, '/$1');\r\n}\r\nfunction removeRootSlash (filepath) {\r\n  return filepath.replace(/^\\/+/, '');\r\n}\r\n\r\nfunction removeBasePath (basedir, filepath) {\r\n  return toArray(basedir).reduce(function (path, remove) {\r\n    if (remove && path.indexOf(remove) === 0) {\r\n      return path.slice(remove.length);\r\n    } else {\r\n      return path;\r\n    }\r\n  }, filepath);\r\n}\r\n\r\nfunction escapeForRegExp (str) {\r\n  return str.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n}\r\n\r\n// Remove the entry whose transformed string is empty since we don't want to inject empty string.\r\nfunction removeEmptySources (sources) {\r\n    return _.reject(sources, function (obj) {\r\n        return _.isEmpty(obj.transformed);\r\n    });\r\n}\r\n\r\nfunction getIndentedTransformations (sources, indent, lineEnding) {\r\n  var transformations = sources.map(function (s) {\r\n    return s.transformed;\r\n  });\r\n  transformations.unshift('');\r\n  transformations.push('');\r\n  return transformations.join(lineEnding + indent);\r\n}\r\n\r\n\r\nfunction getDefaultLineEnding(options, that, grunt) {\r\n  var contents = '';\r\n  \r\n  // when destination file is a template\r\n  var destination = options.template || options.templateString;\r\n\r\n  // if destination file not found, try to guess from destFile\r\n  if (typeof destination === 'undefined') {\r\n    if (options.destFile && grunt.file.exists(that.files[0].dest)) {\r\n      destination = options.destFile;\r\n    } else {\r\n      //if the destination file does not exist yet\r\n      // try to figure out lineEnding through src files\r\n      if (!grunt.file.exists(that.files[0].dest)) {\r\n        destination = that.filesSrc[0];\r\n      } else {\r\n        destination = that.files[0].dest;\r\n      }\r\n    }\r\n  }\r\n  \r\n  if (typeof destination === 'undefined') {\r\n    grunt.log.error('No template found, unable to guess line ending character.');\r\n  } else {\r\n    if (options.templateString) {\r\n      contents = options.templateString;\r\n    } else {\r\n      contents = String(grunt.file.read(destination));\r\n    }\r\n  }\r\n  \r\n  return /\\r\\n/.test(contents) ? '\\r\\n' : '\\n';\r\n}\r\n"}